---
# yamllint disable rule:colons
# clog Jumbo "clog.core.config"  --font straight
#                                             _
#  _ |  _   _      _  _   _  _     _  _   _  (_ .  _
# (_ | (_) (_) .  (_ (_) |  (- .  (_ (_) | ) |  | (_)
#          _/                                     _/
### when clog starts it uses these config values. clog then looks for a file
###    called `clog.config.yaml` in each of the folders specified in the
###    `clog.clogrc.searchOrder` property in the embeded config. Every time a
###    match is found it starts the loop again because you might have changed
###    the search order. Don't make loops - that's dumb.
###    The last config files loaded have the values used.

###    Finally - an external configSource can be specified for each of the root
###    keys - this is because those config are probably project specific and
###    change at a different rate to the main config. They are loaded last.

# --- clog internals ----------------------------------------------------------
clog:
  api:
    # api mappings when the server is used
    - route:
  clogrc:
    configFileBase: clog.config
    configFormat: yaml
    # the search order for the config files. The last file found in the list
    # values higher in the search order are overwritten by values lower down
    # e.g. $HOME/.config/clogrc/clog.config.yaml is overridden by ./clogrc/clog.config.yaml
    searchOrder:
      - /var/clogrc/
      - $HOME/.config/clogrc/
      - ./clogrc/
  # these are the ENV variables that are searched for by the library
  # override these in a local repo if you need th change the names
  env:
    dbToken: DB_ROACH
    awsAccess: AWS_ACCESS_KEY_ID
    awsSecret: AWS_SECRET_ACCESS_KEY
    gitLabAccessToken: GLAT
    gitHubAccessToken: GHAT
    gitHubGistToken: GHGIST
    stashId: CLOG_STASH_ID
    gitHubUser: GHUSR
    gitSshPublicKey: GIT_SSH_PUBLIC_KEY
  homeFolder: set at runtime
  # clog Jumbo --help to see the full font list
  jumbo:
    font: small
    sample: www.mrmxf.com
  version:
    # set at runtime from /releases.yaml
    short: 0.0.0
    long: 0.0.0-type-hash

# --- clog Check --------------------------------------------------------------
check:
  # checkLogLevel: debug | info | warn | error - all go to stdErr
  checkLogLevel: Info
  # logHandler: default | plain - default pretty handler for humans
  logHandler: default

  # the 2nd level keys define the CLI thing to check. If blank use default
  # clog Check - use the default check list
  # clog Check banana - check the list from check.banana: in the config file
  #
  # Syntax
  # 2nd level key = checkName
  #  e.g. check.banana
  #
  # 3rd level key - checkType
  #    .report                      - report the value of a snippet
  #    .report.warn-if
  #    .report.warn-group-NAME
  #    .report.error-if
  #    .report.error-group-NAME
  #    .dependencies                - report the status of dependencies

  default:
    report:
      - tag-ref: clog Sh vCode
      - tag-HEAD: clog Sh git-tag-head
      - tag-latest: clog Sh git-tag-latest
      - tag-origin: clog Sh git-tag-origin
        # warn-group-NAME will perform simple conditions on parsed values
      - warn-group-tags:
          - tag-HEAD != tag-ref
          - tag-latest != tag-ref
          - tag-origin != tag-ref
      - branch: clog Sh git-branch
      - hash-HEAD: clog Sh git-hash-head
      - hash-origin: clog Sh git-hash-origin
      # warn-group-NAME checks previous results and ONLY warns if condition true
      - warn-group-hash:
          - hash-HEAD != hash-origin
      - msg-latest: clog Sh git-message-latest
      - msg-ref: clog Sh git-message-ref
      # warn-group-NAME checks previous results and ONLY warns if condition true
      - warn-group-msg:
          - msg-latest != msg-ref
        # warn-if will run snippets and return warning if $? >0
      - warn-if:
          - tree-clean: clog Sh git-tree-clean
          - tree-ahead: clog Sh git-tree-ahead
          - tree-behind: clog Sh git-tree-behind
          - tree-unstaged: clog Sh git-unstaged
            # === clog Check gitlab ----------------------------------------------------
  gitlab:
    # report on the gitlab environment (empty snippet results in an echo)
    report:
    - PATH:
    - CI_COMMIT_BRANCH:
    - CI_COMMIT_REF_SLUG:
    - CI_PIPELINE_SOURCE:
    - CI_MERGE_REQUEST_APPROVED:
    - CI_MERGE_REQUEST_ID:
    - CI_MERGE_REQUEST_LABELS:
    - CI_MERGE_REQUEST_REF_PATH:
    - CI_MERGE_REQUEST_SOURCE_BRANCH_NAME:
    - CI_BUILDS_DIR:
    - CI_COMMIT_DESCRIPTION:
    - CI_COMMIT_TAG:
    - CI_JOB_STAGE:
    - CI_JOB_TOKEN:
    - CI_PIPELINE_NAME:
    - CI_PROJECT_DIR:
    - CI_PROJECT_PATH:
    - CI_RUNNER_VERSION:
    - CI_SERVER:
    - GITLAB_USER_EMAIL:
    - GITLAB_USER_ID:
    - GITLAB_USER_LOGIN:
    - GITLAB_USER_NAME:
    - KUBECONFIG:

# --- clog Docker -------------------------------------------------------------
docker:
  # optional path to a url or file path or `clog`
  configPath: clog

# --- Shell snippets ---------------------------------------------------------------------
shellsnippets:
  # IMPORTANT ZSH gets confused with "--" so use always use quotes to prevent null output
  # IMPORTANT YAML may parse logical expressions into arrays of strings e.g. [ -z "foo" ]
  # IMPORTANT use quotes carefully '[ -z "foo" ]' is a shell expression [ -z "foo" ] is an array of strings
  # ---------------------------------------------------------------------------
  # dev commands
  godoc: godoc     -http=localhost:6060 &&     open http://localhost:6060/pkg/
  godoc-mac: godoc -http=localhost:6060 && xdg-open http://localhost:6060/pkg/
  # ---------------------------------------------------------------------------
  # git snippets
  git-branch: git branch --show-current
  git-hash-head: git rev-list -1 HEAD
  git-hash-origin: git ls-remote --tags origin | tail -1 | head -c 40
  git-message-latest: git log HEAD | head -5 | tail -1 | xargs
  git-message-ref: echo 'set "clog.config.yaml/shellsnippets.git-message-ref" to a release message in your project'
  git-origin: git config --get remote.origin.url
  git-tag-head: git tag --points-at HEAD
  git-tag-latest: git tag --sort=committerdate | tail -1
  git-tag-origin: git ls-remote --tags origin | tail -1 | sed -r 's/.*([0-9]+\.[0-9]+\.[0-9]+).*/\1/'
  git-tree-ahead: if [ "$(git status|grep -oE '(branch is ahead)')" ];then echo "Branch ahead - do push ";exit 1;else echo "ok";fi
  git-tree-behind: if [ "$(git status|grep -oE '(merge the remote)')" ];then echo "Branch behind - do pull";exit 1;else echo "ok";fi
  git-tree-clean: if [ "$(git status|grep -oE '(working tree clean)')" ];then echo "ok";else echo "Working tree not clean";exit 1;fi
  git-unstaged: if [ "$(git status|grep -oE '(Changes not staged)')" ];then echo "Commit unstaged changes";exit 1; else echo "ok";fi
  vCODE: echo 'set "clog.config.yaml/shellsnippets.vCODE" to reference semver in your project'
  # ---------------------------------------------------------------------------  #
  # --- installer snippets ----------------------------------------------------
  # installer tests can be used like this:
  #   clog Sh is-installed-golang && echo "Yay, it's installed" || echo "Not installed"
  #
  is-installed-clog: 'clog version >/dev/null 2>&1'
  install-clog: 'curl https://mrmxf.com/get/clog | bash'
  install-clogdev: 'curl https://mrmxf.com/get/clogdev | bash'
  install-clogrc: 'curl https://mrmxf.com/get/clogrc | bash'
  #
  is-installed-golang: 'go version >/dev/null 2>&1'
  install-golang: 'echo download go1.23.0.linux-amd64.tar.gz and run: "rm -rf /usr/local/go && tar -C /usr/local -xzf go1.23.0.linux-amd64.tar.gz"'
  install-golang-mac: brew install go
  #
  is-installed-godoc: 'which godoc >/dev/null 2>&1'
  install-godoc: 'go install golang.org/x/tools/cmd/godoc@latest'
  #
  is-installed-golangci-lint: 'golangci-lint --version >/dev/null 2>&1'
  install-golangci-lint: 'curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.60.1'
  #
  is-installed-glab: 'glab version >/dev/null 2>&1'
  install-glab: 'V="1.45.0" && curl -L https://gitlab.com/gitlab-org/cli/-/releases/v${V}/downloads/glab_${V}_Linux_x86_64.deb -o /tmp/glab.deb && sudo apt-get install /tmp/glab.deb'
  install-glab-mac: 'brew install glab'
  #
  is-installed-gh: 'gh --version >/dev/null 2>&1'
  install-gh: |
    (type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y)) \
    && sudo mkdir -p -m 755 /etc/apt/keyrings \
    && wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
    && sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
    && sudo apt update \
    && sudo apt install gh -y
  install-gh-mac: 'brew install gh'
  #
# --- nginx installation configuration ----------------------------------------
# these defaults correspond to the apt package defaults
nginx:
  configPath: embed
  shellsnippets: []
  folder:
    available: /etc/nginx/sites-available/
    enabled: /etc/nginx/sites-enabled/

# --- svc is a chi based website using cloglib/clogsvc ----------------------------
svc:
  configPath: embed
  port: 11998
  configFileName: server.config.yaml
  # use the main env variable name unless overriden by the svc for web ops
  env:
    dbConnectionString: DB_CON_STR_CLOGSVC

  db:
    type: sqlite
    #if no connection details specified then use env.dbConnectionString
    defaultPageLimit: 20
    defaultSort: CreatedAt
  homeFolder: set-at-runtime
  version:
    short: "0.0.0"
    long: 0.0.0-gitcommit

  # webhook handling
  hookprefix: "/hook"
  hooks:
    # params for responding to /hook/website/{id}
    - prefix: /website/staging/{id}
      ruleName: Test staging website
      something: Another property
      somevalue: 600
      somearray: [1, 2, 3, 4]
